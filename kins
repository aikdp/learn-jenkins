 pipeline {
    agent {
        label 'AGENT-1'
    }
     options {
        timeout(time: 30, unit: 'MINUTES') 
        disableConcurrentBuilds()
        ansiColor('xterm')
    }
    parameters {
        choice(name: 'ACTION', choices: ['apply', 'destroy'], description: 'Select action')
    }

    stages {
        stage('Init and Plan') {
            steps {
                withAWS(region: 'us-east-1', credentials: 'aws-creds') {    //b/w the code it will use injects the credentials
                    sh """cd 10-sg
                        terraform init -reconfigure   //here we are deletimg workspace dir for memory, so we need to reconfig everytime
                        terraform plan -out=tfplan
                    """
                }
            }
        }
    
        stage('Apply and Destroy') {
             input {
                message "Should we continue?"
                ok "Yes, we should."
             }
            steps {
                withAWS(region: 'us-east-1', credentials: 'aws-creds') {   
                    sh """cd 10-sg
                       if [${params.ACTION} == 'apply']
                       then
                            terraform apply -auto-approve tfplan
                        elif [${params.ACTION} == 'destroy']
                        then
                            terraform destroy -auto-approve tfplan
                    """
                }
            }
        }
        stage ('Destroy VPC') {
            when {

                expression {params.ACTION == 'destroy'}
            }
            steps{
                build job: '00-vpc', parameters: [[$class: 'StringParameterValue', name: 'ACTION', value: destroy]], wait: false
            }
        }
    } 

    post {
    	always {
            echo 'This section runs always'
            deleteDir()
       	 }
 	    success{
            echo "This section run when pipeline success"
        }
        failure{
            echo "This section run when pipeline failure"
        }
    }
}
